{
  "swagger": "2.0",
  "info": {
    "title": "Douglas Lab API",
    "description": "A RESTful API for Douglas Lab Information Management System.",
    "version": "1.0.0"
  },
  "produces": ["application/json"],
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
  
  "/users": {
    "get": {
      "summary": "Get all users.",
      "description":"",
      "x-swagger-router-controller": "UsersEndpoint",
      "tags": ["UsersEndpoint"],
      "operationId": "usersGet",
      "responses": {
        "200": {
  "description" : "Success. Returns array of users in JSON format."
}
        ,
        "400": {
  "description" : "Malformed input."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users": {
    "post": {
      "summary": "Create a new user. User properties provided in the request body.",
      "description":"Permission required - manager",
      "x-swagger-router-controller": "UsersEndpoint",
      "tags": ["UsersEndpoint"],
      "operationId": "usersPost",
      "responses": {
        "200": {
  "description" : "Success. Returns new user in JSON format."
}
        ,
        "400": {
  "description" : "Malformed input."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users/:email": {
    "get": {
      "summary": "Get user by the email provided.",
      "description":"",
      "x-swagger-router-controller": "UsersEndpoint",
      "tags": ["UsersEndpoint"],
      "operationId": "usersEmailGet",
      "responses": {
        "200": {
  "description" : "Success. Returns user in JSON format.."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "User not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users/:email": {
    "put": {
      "summary": "Update a user. Updated user properties are provided in the request body.",
      "description":"",
      "x-swagger-router-controller": "UsersEndpoint",
      "tags": ["UsersEndpoint"],
      "operationId": "usersEmailPut",
      "responses": {
        "200": {
  "description" : "Success. Returns updated user in JSON format."
}
        ,
        "400": {
  "description" : "Malformed input."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "User not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users/:email": {
    "delete": {
      "summary": "Delete a user.",
      "description":"",
      "x-swagger-router-controller": "UsersEndpoint",
      "tags": ["UsersEndpoint"],
      "operationId": "usersEmailDelete",
      "responses": {
        "200": {
  "description" : "Success. Returns updated user in JSON format."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "User not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users/login": {
    "post": {
      "summary": "Authenticate a user. Email and password are provided in the Authorization HTTP header (see Authentication). Upon successful login, will return the user object.",
      "description":"Permission required - none.",
      "x-swagger-router-controller": "UsersEndpoint",
      "tags": ["UsersEndpoint"],
      "operationId": "usersLoginPost",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "404": {
  "description" : "User not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } 
  
   ,
  
  "/health": {
    "get": {
      "summary": "Gets the current status of the service, along with service statistics.",
      "description":"",
      "x-swagger-router-controller": "Health",
      "tags": ["Health"],
      "operationId": "healthGet",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } 
  
   ,
  
  "/users/:email/service": {
    "get": {
      "summary": "Retrieves all service properties.",
      "description":"Permission required - manager.",
      "x-swagger-router-controller": "UsersCloudServiceEndpoint",
      "tags": ["UsersCloudServiceEndpoint"],
      "operationId": "usersEmailServiceGet",
      "responses": {
        "200": {
  "description" : "Success. Returns array of services (always an array)"
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "Specified service not found (if no service provided, return 200 and an empty array)."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users/:email/service": {
    "post": {
      "summary": "Create a new service. Service properties are provided in the request body.",
      "description":"Permission required - manager.",
      "x-swagger-router-controller": "UsersCloudServiceEndpoint",
      "tags": ["UsersCloudServiceEndpoint"],
      "operationId": "usersEmailServicePost",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "400": {
  "description" : "Missing serviceName."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "User not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users/:email/service/:serviceName": {
    "get": {
      "summary": "Retrieves specified service properties.",
      "description":"Permission required - manager.",
      "x-swagger-router-controller": "UsersCloudServiceEndpoint",
      "tags": ["UsersCloudServiceEndpoint"],
      "operationId": "usersEmailServiceServiceNameGet",
      "responses": {
        "200": {
  "description" : "Success. Returns array of services (always an array)"
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "Specified service not found (if no service provided, return 200 and an empty array)."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/users/:email/service/:serviceName": {
    "delete": {
      "summary": "Deletes service.",
      "description":"Permission required - manager.",
      "x-swagger-router-controller": "UsersCloudServiceEndpoint",
      "tags": ["UsersCloudServiceEndpoint"],
      "operationId": "usersEmailServiceServiceNameDelete",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "400": {
  "description" : "Missing serviceName."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "User not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } 
  
   ,
  
  "/admin/audit": {
    "get": {
      "summary": "Gets the audit log for system operations fitting the search criteria (all if none provided).",
      "description":"",
      "x-swagger-router-controller": "AdministratorEndpoint",
      "tags": ["AdministratorEndpoint"],
      "operationId": "adminAuditGet",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/admin/permissions": {
    "get": {
      "summary": "Gets permissions fitting the search criteria (all if none provided).",
      "description":"",
      "x-swagger-router-controller": "AdministratorEndpoint",
      "tags": ["AdministratorEndpoint"],
      "operationId": "adminPermissionsGet",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/admin/permissions": {
    "post": {
      "summary": "Creates a new permission, or updates an existing one. Updated permission properties are provided in the request body.",
      "description":"",
      "x-swagger-router-controller": "AdministratorEndpoint",
      "tags": ["AdministratorEndpoint"],
      "operationId": "adminPermissionsPost",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "401": {
  "description" : "Incorrect entity, action or permission level."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } 
  
   ,
  
  "/items": {
    "get": {
      "summary": "Get all items fitting the search criteria (all if none provided).",
      "description":"",
      "x-swagger-router-controller": "ItemsEndpoint",
      "tags": ["ItemsEndpoint"],
      "operationId": "itemsGet",
      "parameters": [
        {
  "name" : "Search criteria",
  "in" : "query",
  "description" : "<ul> <li>values are specified as a query string in the form of field1=value1&field2=value2...</li> <li>operator=or|and - (and by default)</li> <li>ignorecase=false|true - (true by default)</li> <li>if the search string is missing, all items will be returned</li> </ul>",
  "required" : false,
  "type" : "string"
}
        
      ],
      "responses": {
        "200": {
  "description" : "Success. Returns an array of items in JSON format."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "Item not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/items": {
    "post": {
      "summary": "Creates a new item. Item properties are provided in the request body.",
      "description":"",
      "x-swagger-router-controller": "ItemsEndpoint",
      "tags": ["ItemsEndpoint"],
      "operationId": "itemsPost",
      "responses": {
        "201": {
  "description" : "Success. Returns new item in JSON format."
}
        ,
        "400": {
  "description" : "Malformed input."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/items/:id": {
    "get": {
      "summary": "Get items by the id provided.",
      "description":"",
      "x-swagger-router-controller": "ItemsEndpoint",
      "tags": ["ItemsEndpoint"],
      "operationId": "itemsIdGet",
      "responses": {
        "200": {
  "description" : "Success. Returns item in JSON format."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "Item not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/items/:id": {
    "put": {
      "summary": "Update an item. Updated item properties are provided in the request body.",
      "description":"",
      "x-swagger-router-controller": "ItemsEndpoint",
      "tags": ["ItemsEndpoint"],
      "operationId": "itemsIdPut",
      "responses": {
        "201": {
  "description" : "Success. Returns new item in JSON format."
}
        ,
        "400": {
  "description" : "Malformed input."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "Item not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/items/:id": {
    "delete": {
      "summary": "Delete an item.",
      "description":"",
      "x-swagger-router-controller": "ItemsEndpoint",
      "tags": ["ItemsEndpoint"],
      "operationId": "itemsIdDelete",
      "responses": {
        "200": {
  "description" : "Success."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "Item not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } ,
  
  "/items/:id/true": {
    "put": {
      "summary": "Replaces all provided properties of an item. Updated item properties are provided in the request body.",
      "description":"",
      "x-swagger-router-controller": "ItemsEndpoint",
      "tags": ["ItemsEndpoint"],
      "operationId": "itemsIdTruePut",
      "responses": {
        "201": {
  "description" : "Success. Returns new item in JSON format."
}
        ,
        "400": {
  "description" : "Malformed input."
}
        ,
        "401": {
  "description" : "Invalid token."
}
        ,
        "403": {
  "description" : "Permission denied."
}
        ,
        "404": {
  "description" : "Item not found."
}
        ,
        "500": {
  "description" : "Server error."
}
        
        
      }
    }
  } 
  
   
  }, "definitions": {
  
  }
}
